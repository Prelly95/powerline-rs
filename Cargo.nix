
# Generated by crate2nix 0.6.0-alpha.0 with the command:
#   "generate"
# See https://github.com/kolloch/crate2nix for more info.

{ pkgs? import <nixpkgs> { config = {}; },
  lib? pkgs.lib,
  callPackage? pkgs.callPackage,
  stdenv? pkgs.stdenv,
  buildRustCrate? pkgs.buildRustCrate,
  fetchurl? pkgs.fetchurl,
  fetchCrate? pkgs.fetchCrate,
  # The features to enable for the root_crate or the workspace_members.
  rootFeatures? ["default"]}:

rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #

  rootCrate = {
    packageId = "powerline-rs 0.1.9 (path+file:///home/user/Coding/Rust/powerline-rs)";

    # Use this attribute to refer to the derivation building your root crate package.
    # You can override the features with rootCrate.build.override { features = [ "default" "feature1" ... ]; }.
    build = buildRustCrateWithFeatures {
      packageId = "powerline-rs 0.1.9 (path+file:///home/user/Coding/Rust/powerline-rs)";
      features = rootFeatures;
    };
  };
  root_crate =
    builtins.trace "root_crate is deprecated since crate2nix 0.4. Please use rootCrate instead." rootCrate.build;
  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "powerline-rs" = {
      packageId = "powerline-rs 0.1.9 (path+file:///home/user/Coding/Rust/powerline-rs)";
      build = buildRustCrateWithFeatures {
        packageId = "powerline-rs 0.1.9 (path+file:///home/user/Coding/Rust/powerline-rs)";
        features = rootFeatures;
      };
    };
  };
  workspace_members =
    builtins.trace
      "workspace_members is deprecated in crate2nix 0.4. Please use workspaceMembers instead."
      lib.mapAttrs (n: v: v.build) workspaceMembers;

  #
  # "private" attributes that may change in every new version of crate2nix.
  #

  # Build and dependency information for crates.
  # Many of the fields are passed one-to-one to buildRustCrate.
  #
  # Noteworthy:
  # * `crateBin = [{name = ","; path = ",";}];`: a hack to disable building the binary.
  # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
  #   but with additional information which is used during dependency/feature resolution.
  # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.

  crates = {
    "ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "ansi_term";
        version = "0.11.0";
        edition = "2015";
        sha256 = "08fk0p2xvkqpmz3zlrwnf6l8sj2vngw464rvzspzp31sbgxbwm4v";
        authors = [
          "ogham@bsago.me"
          "Ryan Scheel (Havvy) <ryan.havvy@gmail.com>"
          "Josh Triplett <josh@joshtriplett.org>"
        ];
        dependencies = {
          "winapi" = {
            packageId = "winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)";
            target = (target."os" == "windows");
            features = [ "errhandlingapi" "consoleapi" "processenv" ];
          };
        };
        features = {
        };
      };
    "argon2rs 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "argon2rs";
        version = "0.2.5";
        edition = "2015";
        sha256 = "1byl9b3wwyrarn8qack21v5fi2qsnn3y5clvikk2apskhmnih1rw";
        authors = [
          "bryant <bryant@defrag.in>"
        ];
        dependencies = {
          "blake2-rfc" = "blake2-rfc 0.2.18 (registry+https://github.com/rust-lang/crates.io-index)";
          "scoped_threadpool" = "scoped_threadpool 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
          "simd" = [ "blake2-rfc/simd_asm" ];
        };
      };
    "arrayvec 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "arrayvec";
        version = "0.4.7";
        edition = "2015";
        sha256 = "0fzgv7z1x1qnyd7j32vdcadk4k9wfx897y06mr3bw1yi52iqf4z4";
        authors = [
          "bluss"
        ];
        dependencies = {
          "nodrop" = {
            packageId = "nodrop 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
          };
        };
        features = {
          "default" = [ "std" ];
          "serde-1" = [ "serde" ];
        };
      };
    "atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "atty";
        version = "0.2.11";
        edition = "2015";
        sha256 = "0by1bj2km9jxi4i4g76zzi76fc2rcm9934jpnyrqd95zw344pb20";
        authors = [
          "softprops <d.tangren@gmail.com>"
        ];
        dependencies = {
          "libc" = {
            packageId = "libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
            target = target."unix";
          };
          "termion" = {
            packageId = "termion 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)";
            target = (target."os" == "redox");
          };
          "winapi" = {
            packageId = "winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)";
            target = target."windows";
            features = [ "consoleapi" "processenv" "minwinbase" "minwindef" "winbase" ];
          };
        };
        features = {
        };
      };
    "backtrace 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "backtrace";
        version = "0.3.9";
        edition = "2015";
        sha256 = "137pjkcn89b7fqk78w65ggj92pynmf1hkr1sjz53aga4b50lkmwm";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "The Rust Project Developers"
        ];
        dependencies = {
          "backtrace-sys" = {
            packageId = "backtrace-sys 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
            target = (target."unix" && (!(target."os" == "fuchsia")) && (!(target."os" == "emscripten")) && (!(target."os" == "macos")) && (!(target."os" == "ios")));
          };
          "cfg-if" = "cfg-if 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)";
          "libc" = {
            packageId = "libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)";
            target = target."unix";
          };
          "rustc-demangle" = "rustc-demangle 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)";
          "winapi" = {
            packageId = "winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
            target = target."windows";
            features = [ "std" "dbghelp" "processthreadsapi" "winnt" "minwindef" ];
          };
        };
        features = {
          "dbghelp" = [ "winapi" ];
          "default" = [ "libunwind" "libbacktrace" "coresymbolication" "dladdr" "dbghelp" ];
          "gimli-symbolize" = [ "addr2line" "findshlibs" "gimli" "memmap" "object" ];
          "libbacktrace" = [ "backtrace-sys" ];
          "serialize-rustc" = [ "rustc-serialize" ];
          "serialize-serde" = [ "serde" "serde_derive" ];
        };
        resolvedDefaultFeatures = [ "backtrace-sys" "coresymbolication" "dbghelp" "default" "dladdr" "libbacktrace" "libunwind" "winapi" ];
      };
    "backtrace-sys 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "backtrace-sys";
        version = "0.1.24";
        edition = "2015";
        sha256 = "15d6jlknykiijcin3vqbx33760w24ss5qw3l1xd3hms5k4vc8305";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = {
          "libc" = "libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        buildDependencies = {
          "cc" = "cc 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
        };
      };
    "bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "bitflags";
        version = "1.0.4";
        edition = "2015";
        sha256 = "1g1wmz2001qmfrd37dnd5qiss5njrw26aywmg6yhkmkbyrhjxb08";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
    "blake2-rfc 0.2.18 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "blake2-rfc";
        version = "0.2.18";
        edition = "2015";
        sha256 = "0pyqrik4471ljk16prs0iwb2sam39z0z6axyyjxlqxdmf4wprf0l";
        authors = [
          "Cesar Eduardo Barros <cesarb@cesarb.eti.br>"
        ];
        dependencies = {
          "arrayvec" = {
            packageId = "arrayvec 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
          };
          "constant_time_eq" = "constant_time_eq 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
          "default" = [ "std" ];
          "simd_asm" = [ "simd_opt" ];
          "simd_opt" = [ "simd" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
    "cc 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "cc";
        version = "1.0.25";
        edition = "2015";
        # Hack to suppress building binaries
        crateBin = [{name = ","; path = ",";}];
        sha256 = "0pd8fhjlpr5qan984frkf1c8nxrqp6827wmmfzhm2840229z2hq0";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "parallel" = [ "rayon" ];
        };
      };
    "cfg-if 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "cfg-if";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1i0w5v51fxnlfsfs9asrnx5bs2di4hcq363gbaw39wya3cmw6vky";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
        };
      };
    "chrono 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "chrono";
        version = "0.4.6";
        edition = "2015";
        sha256 = "0cxgqgf4lknsii1k806dpmzapi2zccjpa350ns5wpb568mij096x";
        authors = [
          "Kang Seonghoon <public+rust@mearie.org>"
          "Brandon W Maister <quodlibetor@gmail.com>"
        ];
        dependencies = {
          "num-integer" = {
            packageId = "num-integer 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
          };
          "num-traits" = {
            packageId = "num-traits 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
          };
          "time" = {
            packageId = "time 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
          };
        };
        features = {
          "clock" = [ "time" ];
          "default" = [ "clock" ];
        };
        resolvedDefaultFeatures = [ "clock" "default" "time" ];
      };
    "clap 2.32.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "clap";
        version = "2.32.0";
        edition = "2015";
        sha256 = "1hdjf0janvpjkwrjdjx1mm2aayzr54k72w6mriyr0n5anjkcj1lx";
        authors = [
          "Kevin K. <kbknapp@gmail.com>"
        ];
        dependencies = {
          "ansi_term" = {
            packageId = "ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
            target = (!target."windows");
          };
          "atty" = {
            packageId = "atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
          };
          "bitflags" = "bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)";
          "strsim" = {
            packageId = "strsim 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
          };
          "textwrap" = "textwrap 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)";
          "unicode-width" = "unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)";
          "vec_map" = {
            packageId = "vec_map 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
          };
        };
        features = {
          "color" = [ "ansi_term" "atty" ];
          "default" = [ "suggestions" "color" "vec_map" ];
          "doc" = [ "yaml" ];
          "lints" = [ "clippy" ];
          "suggestions" = [ "strsim" ];
          "wrap_help" = [ "term_size" "textwrap/term_size" ];
          "yaml" = [ "yaml-rust" ];
        };
        resolvedDefaultFeatures = [ "ansi_term" "atty" "color" "default" "strsim" "suggestions" "vec_map" ];
      };
    "constant_time_eq 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "constant_time_eq";
        version = "0.1.3";
        edition = "2015";
        sha256 = "03qri9hjf049gwqg9q527lybpg918q6y5q4g9a5lma753nff49wd";
        authors = [
          "Cesar Eduardo Barros <cesarb@cesarb.eti.br>"
        ];
        features = {
        };
      };
    "curl-sys 0.4.13 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "curl-sys";
        version = "0.4.13";
        edition = "2015";
        sha256 = "1hnlhc77a9k5ama059yv1zfsy9n84n3ymik1k9alj8spylx0zzix";
        libName = "curl_sys";
        libPath = "lib.rs";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = {
          "libc" = "libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)";
          "libz-sys" = "libz-sys 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)";
          "openssl-sys" = {
            packageId = "openssl-sys 0.9.38 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
            target = (target."unix" && (!(target."os" == "macos")));
          };
          "winapi" = {
            packageId = "winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)";
            target = target."windows";
            features = [ "winsock2" "ws2def" ];
          };
        };
        buildDependencies = {
          "cc" = "cc 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)";
          "pkg-config" = "pkg-config 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)";
          "vcpkg" = {
            packageId = "vcpkg 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)";
            target = (target."env" == "msvc");
          };
        };
        features = {
          "default" = [ "ssl" ];
          "http2" = [ "libnghttp2-sys" ];
          "ssl" = [ "openssl-sys" ];
          "static-ssl" = [ "openssl-sys/vendored" ];
        };
        resolvedDefaultFeatures = [ "default" "openssl-sys" "ssl" ];
      };
    "dirs 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "dirs";
        version = "1.0.4";
        edition = "2015";
        sha256 = "1hp3nz0350b0gpavb3w5ajqc9l1k59cfrcsr3hcavwlkizdnpv1y";
        authors = [
          "Simon Ochsenreither <simon@ochsenreither.de>"
        ];
        dependencies = {
          "libc" = {
            packageId = "libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)";
            target = target."unix";
          };
          "redox_users" = {
            packageId = "redox_users 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)";
            target = (target."os" == "redox");
          };
          "winapi" = {
            packageId = "winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)";
            target = target."windows";
            features = [ "knownfolders" "objbase" "shlobj" "winbase" "winerror" ];
          };
        };
        features = {
        };
      };
    "failure 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "failure";
        version = "0.1.2";
        edition = "2015";
        sha256 = "0xlvmy42sjv63pgbbb0l9bdmvanlchyzbyd9mv1fs0yhw8np73x1";
        authors = [
          "Without Boats <boats@mozilla.com>"
        ];
        dependencies = {
          "backtrace" = {
            packageId = "backtrace 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
          };
          "failure_derive" = {
            packageId = "failure_derive 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
          };
        };
        features = {
          "default" = [ "std" "derive" ];
          "derive" = [ "failure_derive" ];
          "std" = [ "backtrace" ];
        };
        resolvedDefaultFeatures = [ "backtrace" "default" "derive" "failure_derive" "std" ];
      };
    "failure_derive 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "failure_derive";
        version = "0.1.2";
        edition = "2015";
        sha256 = "16zw2n9rmjisk8n4rxxqm7ffmxgd5dspf04b97lh7ns1nypk54w3";
        procMacro = true;
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        dependencies = {
          "proc-macro2" = "proc-macro2 0.4.20 (registry+https://github.com/rust-lang/crates.io-index)";
          "quote" = "quote 0.6.8 (registry+https://github.com/rust-lang/crates.io-index)";
          "syn" = "syn 0.14.9 (registry+https://github.com/rust-lang/crates.io-index)";
          "synstructure" = "synstructure 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
        };
      };
    "fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "fuchsia-zircon";
        version = "0.3.3";
        edition = "2015";
        sha256 = "0jrf4shb1699r4la8z358vri8318w4mdi6qzfqy30p2ymjlca4gk";
        authors = [
          "Raph Levien <raph@google.com>"
        ];
        dependencies = {
          "bitflags" = "bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)";
          "fuchsia-zircon-sys" = "fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
        };
      };
    "fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "fuchsia-zircon-sys";
        version = "0.3.3";
        edition = "2015";
        sha256 = "08jp1zxrm9jbrr6l26bjal4dbm8bxfy57ickdgibsqxr1n9j3hf5";
        authors = [
          "Raph Levien <raph@google.com>"
        ];
        features = {
        };
      };
    "git2 0.7.5 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "git2";
        version = "0.7.5";
        edition = "2015";
        sha256 = "0niyjy68vb790x5hl72qbpp1145xfbfrlf0rgmc8fq4qwbz4p5pb";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = {
          "bitflags" = "bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)";
          "libc" = "libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)";
          "libgit2-sys" = "libgit2-sys 0.7.10 (registry+https://github.com/rust-lang/crates.io-index)";
          "log" = "log 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)";
          "openssl-probe" = {
            packageId = "openssl-probe 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
            target = (target."unix" && (!(target."os" == "macos")));
          };
          "openssl-sys" = {
            packageId = "openssl-sys 0.9.38 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
            target = (target."unix" && (!(target."os" == "macos")));
          };
          "url" = "url 1.7.1 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
          "curl" = [ "libgit2-sys/curl" ];
          "default" = [ "ssh" "https" "curl" "ssh_key_from_memory" ];
          "https" = [ "libgit2-sys/https" "openssl-sys" "openssl-probe" ];
          "ssh" = [ "libgit2-sys/ssh" ];
          "ssh_key_from_memory" = [ "libgit2-sys/ssh_key_from_memory" ];
        };
        resolvedDefaultFeatures = [ "curl" "default" "https" "openssl-probe" "openssl-sys" "ssh" "ssh_key_from_memory" ];
      };
    "idna 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "idna";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1gwgl19rz5vzi67rrhamczhxy050f5ynx4ybabfapyalv7z1qmjy";
        authors = [
          "The rust-url developers"
        ];
        dependencies = {
          "matches" = "matches 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)";
          "unicode-bidi" = "unicode-bidi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)";
          "unicode-normalization" = "unicode-normalization 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
        };
      };
    "libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "libc";
        version = "0.2.43";
        edition = "2015";
        sha256 = "0pshydmsq71kl9276zc2928ld50sp524ixcqkcqsgq410dx6c50b";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
    "libgit2-sys 0.7.10 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "libgit2-sys";
        version = "0.7.10";
        edition = "2015";
        sha256 = "1d6fqpdslgzvx1n06wnyi2vd22hl982jmkx9n7g1nyxpzmjc7abf";
        libName = "libgit2_sys";
        libPath = "lib.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = {
          "curl-sys" = {
            packageId = "curl-sys 0.4.13 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
          };
          "libc" = "libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)";
          "libssh2-sys" = {
            packageId = "libssh2-sys 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
          };
          "libz-sys" = "libz-sys 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)";
          "openssl-sys" = {
            packageId = "openssl-sys 0.9.38 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
            target = target."unix";
          };
        };
        buildDependencies = {
          "cc" = "cc 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)";
          "pkg-config" = "pkg-config 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
          "curl" = [ "curl-sys" ];
          "https" = [ "openssl-sys" ];
          "ssh" = [ "libssh2-sys" ];
        };
        resolvedDefaultFeatures = [ "curl" "curl-sys" "https" "libssh2-sys" "openssl-sys" "ssh" "ssh_key_from_memory" ];
      };
    "libssh2-sys 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "libssh2-sys";
        version = "0.2.11";
        edition = "2015";
        sha256 = "1mjily9qjjjf31pzvlxyqnp1midjc77s6sd303j46d14igna7nhi";
        libName = "libssh2_sys";
        libPath = "lib.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = {
          "libc" = "libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)";
          "libz-sys" = "libz-sys 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)";
          "openssl-sys" = {
            packageId = "openssl-sys 0.9.38 (registry+https://github.com/rust-lang/crates.io-index)";
            target = target."unix";
          };
        };
        buildDependencies = {
          "cc" = "cc 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)";
          "pkg-config" = "pkg-config 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)";
          "vcpkg" = {
            packageId = "vcpkg 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)";
            target = (target."env" == "msvc");
          };
        };
        features = {
        };
      };
    "libz-sys 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "libz-sys";
        version = "1.0.24";
        edition = "2015";
        sha256 = "1f0g205yn19z3kn255gp6ls5aq8ws51hv01mpci8iybssyzz8x8x";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = {
          "libc" = "libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        buildDependencies = {
          "cc" = "cc 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)";
          "pkg-config" = "pkg-config 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)";
          "vcpkg" = {
            packageId = "vcpkg 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)";
            target = (target."env" == "msvc");
          };
        };
        features = {
        };
      };
    "log 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "log";
        version = "0.4.5";
        edition = "2015";
        sha256 = "1hdcj17al94ga90q7jx2y1rmxi68n3akra1awv3hr3s9b9zipgq6";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = {
          "cfg-if" = "cfg-if 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
        };
      };
    "matches 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "matches";
        version = "0.1.8";
        edition = "2015";
        sha256 = "03hl636fg6xggy0a26200xs74amk3k9n0908rga2szn68agyz3cv";
        libPath = "lib.rs";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];
        features = {
        };
      };
    "nodrop 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "nodrop";
        version = "0.1.12";
        edition = "2015";
        sha256 = "1b9rxvdg8061gxjc239l9slndf0ds3m6fy2sf3gs8f9kknqgl49d";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
          "use_union" = [ "nodrop-union" ];
        };
      };
    "num-integer 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "num-integer";
        version = "0.1.39";
        edition = "2015";
        sha256 = "1f42ls46cghs13qfzgbd7syib2zc6m7hlmv1qlar6c9mdxapvvbg";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = {
          "num-traits" = {
            packageId = "num-traits 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
          };
        };
        features = {
          "default" = [ "std" ];
          "i128" = [ "num-traits/i128" ];
          "std" = [ "num-traits/std" ];
        };
      };
    "num-traits 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "num-traits";
        version = "0.2.6";
        edition = "2015";
        sha256 = "1d20sil9n0wgznd1nycm3yjfj1mzyl41ambb7by1apxlyiil1azk";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
        };
      };
    "openssl-probe 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "openssl-probe";
        version = "0.1.2";
        edition = "2015";
        sha256 = "1a89fznx26vvaxyrxdvgf6iwai5xvs6xjvpjin68fgvrslv6n15a";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
        };
      };
    "openssl-sys 0.9.38 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "openssl-sys";
        version = "0.9.38";
        edition = "2015";
        sha256 = "1jlacadxbh7wi89prdfqyr9pclgvmmcsfviinbqz85sl2f49z0pg";
        build = "build/main.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = {
          "libc" = "libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        buildDependencies = {
          "cc" = "cc 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)";
          "pkg-config" = "pkg-config 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)";
          "vcpkg" = {
            packageId = "vcpkg 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)";
            target = (target."env" == "msvc");
          };
        };
        features = {
          "vendored" = [ "openssl-src" ];
        };
      };
    "percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "percent-encoding";
        version = "1.0.1";
        edition = "2015";
        sha256 = "04ahrp7aw4ip7fmadb0bknybmkfav0kk0gw4ps3ydq5w6hr0ib5i";
        libPath = "lib.rs";
        authors = [
          "The rust-url developers"
        ];
        features = {
        };
      };
    "pkg-config 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "pkg-config";
        version = "0.3.14";
        edition = "2015";
        sha256 = "0207fsarrm412j0dh87lfcas72n8mxar7q3mgflsbsrqnb140sv6";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
        };
      };
    "powerline-rs 0.1.9 (path+file:///home/user/Coding/Rust/powerline-rs)"
      = rec {
        crateName = "powerline-rs";
        version = "0.1.9";
        edition = "2015";
        src = (builtins.filterSource sourceFilter ./.);
        authors = [
          "jD91mZM2 <me@krake.one>"
        ];
        dependencies = {
          "chrono" = {
            packageId = "chrono 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
          };
          "clap" = "clap 2.32.0 (registry+https://github.com/rust-lang/crates.io-index)";
          "dirs" = "dirs 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)";
          "git2" = {
            packageId = "git2 0.7.5 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
          };
          "users" = {
            packageId = "users 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
          };
        };
        buildDependencies = {
          "clap" = "clap 2.32.0 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
          "default" = [ "chrono" "git2" "users" ];
        };
        resolvedDefaultFeatures = [ "chrono" "default" "git2" "users" ];
      };
    "proc-macro2 0.4.20 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "proc-macro2";
        version = "0.4.20";
        edition = "2015";
        sha256 = "0yr74b00d3wzg21kjvfln7vzzvf9aghbaff4c747i3grbd997ys2";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = {
          "unicode-xid" = "unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
          "default" = [ "proc-macro" ];
          "nightly" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
    "quote 0.6.8 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "quote";
        version = "0.6.8";
        edition = "2015";
        sha256 = "0dq6j23w6pmc4l6v490arixdwypy0b82z76nrzaingqhqri4p3mh";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = {
          "proc-macro2" = {
            packageId = "proc-macro2 0.4.20 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
          };
        };
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
    "rand 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "rand";
        version = "0.4.3";
        edition = "2015";
        sha256 = "1644wri45l147822xy7dgdm4k7myxzs66cb795ga0x7dan11ci4f";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = {
          "fuchsia-zircon" = {
            packageId = "fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)";
            target = (target."os" == "fuchsia");
          };
          "libc" = {
            packageId = "libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
            target = target."unix";
          };
          "winapi" = {
            packageId = "winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)";
            target = target."windows";
            features = [ "minwindef" "ntsecapi" "profileapi" "winnt" ];
          };
        };
        features = {
          "default" = [ "std" ];
          "nightly" = [ "i128_support" ];
          "std" = [ "libc" ];
        };
        resolvedDefaultFeatures = [ "default" "libc" "std" ];
      };
    "redox_syscall 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "redox_syscall";
        version = "0.1.40";
        edition = "2015";
        sha256 = "132rnhrq49l3z7gjrwj2zfadgw6q0355s6a7id7x7c0d7sk72611";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        features = {
        };
      };
    "redox_termios 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "redox_termios";
        version = "0.1.1";
        edition = "2015";
        sha256 = "04s6yyzjca552hdaqlvqhp3vw0zqbc304md5czyd3axh56iry8wh";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        dependencies = {
          "redox_syscall" = "redox_syscall 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
        };
      };
    "redox_users 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "redox_users";
        version = "0.2.0";
        edition = "2015";
        sha256 = "0s9jrh378jk8rfi1xfwxvh2r1gv6rn3bq6n7sbajkrqqq0xzijvf";
        authors = [
          "Jose Narvaez <goyox86@gmail.com>"
          "Wesley Hershberger <mggmugginsmc@gmail.com>"
        ];
        dependencies = {
          "argon2rs" = {
            packageId = "argon2rs 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
          };
          "failure" = "failure 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)";
          "rand" = "rand 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)";
          "redox_syscall" = "redox_syscall 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
        };
      };
    "rustc-demangle 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "rustc-demangle";
        version = "0.1.9";
        edition = "2015";
        sha256 = "00ma4r9haq0zv5krps617mym6y74056pfcivyld0kpci156vfaax";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
        };
      };
    "scoped_threadpool 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "scoped_threadpool";
        version = "0.1.9";
        edition = "2015";
        sha256 = "1arqj2skcfr46s1lcyvnlmfr5456kg5nhn8k90xyfjnxkp5yga2v";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        features = {
        };
      };
    "strsim 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "strsim";
        version = "0.7.0";
        edition = "2015";
        sha256 = "0fy0k5f2705z73mb3x9459bpcvrx4ky8jpr4zikcbiwan4bnm0iv";
        authors = [
          "Danny Guo <dannyguo91@gmail.com>"
        ];
        features = {
        };
      };
    "syn 0.14.9 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "syn";
        version = "0.14.9";
        edition = "2015";
        sha256 = "1ia0qbrnqz40s8886b2jpcjiqfbziigd96lqjfin06xk6i28vr7b";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = {
          "proc-macro2" = {
            packageId = "proc-macro2 0.4.20 (registry+https://github.com/rust-lang/crates.io-index)";
            usesDefaultFeatures = false;
          };
          "quote" = {
            packageId = "quote 0.6.8 (registry+https://github.com/rust-lang/crates.io-index)";
            optional = true;
            usesDefaultFeatures = false;
          };
          "unicode-xid" = "unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "parsing" "printing" "proc-macro" "quote" "visit" ];
      };
    "synstructure 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "synstructure";
        version = "0.9.0";
        edition = "2015";
        sha256 = "1ipvy750zdyrxn9d60ns5r2niqnv8k3dky5ila725s25gxsxrq19";
        authors = [
          "Nika Layzell <nika@thelayzells.com>"
        ];
        dependencies = {
          "proc-macro2" = "proc-macro2 0.4.20 (registry+https://github.com/rust-lang/crates.io-index)";
          "quote" = "quote 0.6.8 (registry+https://github.com/rust-lang/crates.io-index)";
          "syn" = {
            packageId = "syn 0.14.9 (registry+https://github.com/rust-lang/crates.io-index)";
            features = [ "visit" "extra-traits" ];
          };
          "unicode-xid" = "unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
        };
      };
    "termion 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "termion";
        version = "1.5.1";
        edition = "2015";
        sha256 = "02gq4vd8iws1f3gjrgrgpajsk2bk43nds5acbbb4s8dvrdvr8nf1";
        authors = [
          "ticki <Ticki@users.noreply.github.com>"
          "gycos <alexandre.bury@gmail.com>"
          "IGI-111 <igi-111@protonmail.com>"
        ];
        dependencies = {
          "libc" = {
            packageId = "libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)";
            target = (!(target."os" == "redox"));
          };
          "redox_syscall" = {
            packageId = "redox_syscall 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)";
            target = (target."os" == "redox");
          };
          "redox_termios" = {
            packageId = "redox_termios 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)";
            target = (target."os" == "redox");
          };
        };
        features = {
        };
      };
    "textwrap 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "textwrap";
        version = "0.10.0";
        edition = "2015";
        sha256 = "1s8d5cna12smhgj0x2y1xphklyk2an1yzbadnj89p1vy5vnjpsas";
        authors = [
          "Martin Geisler <martin@geisler.net>"
        ];
        dependencies = {
          "unicode-width" = "unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
        };
      };
    "time 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "time";
        version = "0.1.40";
        edition = "2015";
        sha256 = "0wgnbjamljz6bqxsd5axc4p2mmhkqfrryj4gf2yswjaxiw5dd01m";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = {
          "libc" = "libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)";
          "redox_syscall" = {
            packageId = "redox_syscall 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)";
            target = (target."os" == "redox");
          };
          "winapi" = {
            packageId = "winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)";
            target = target."windows";
            features = [ "std" "minwinbase" "minwindef" "ntdef" "profileapi" "sysinfoapi" "timezoneapi" ];
          };
        };
        features = {
        };
      };
    "unicode-bidi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "unicode-bidi";
        version = "0.3.4";
        edition = "2015";
        sha256 = "0lcd6jasrf8p9p0q20qyf10c6xhvw40m2c4rr105hbk6zy26nj1q";
        libName = "unicode_bidi";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = {
          "matches" = "matches 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
          "flame_it" = [ "flame" "flamer" ];
          "with_serde" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
    "unicode-normalization 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "unicode-normalization";
        version = "0.1.7";
        edition = "2015";
        sha256 = "1da2hv800pd0wilmn4idwpgv5p510hjxizjcfv6xzb40xcsjd8gs";
        authors = [
          "kwantam <kwantam@gmail.com>"
        ];
        features = {
        };
      };
    "unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "unicode-width";
        version = "0.1.5";
        edition = "2015";
        sha256 = "0886lc2aymwgy0lhavwn6s48ik3c61ykzzd3za6prgnw51j7bi4w";
        authors = [
          "kwantam <kwantam@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
    "unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "unicode-xid";
        version = "0.1.0";
        edition = "2015";
        sha256 = "05wdmwlfzxhq3nhsxn6wx4q8dhxzzfb9szsz6wiw092m1rjj01zj";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
    "url 1.7.1 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "url";
        version = "1.7.1";
        edition = "2015";
        sha256 = "1l36pbvlwdnh3zqz4wp5n6jg332wkis9pi2g3vy12xr8k4nfyk8i";
        authors = [
          "The rust-url developers"
        ];
        dependencies = {
          "idna" = "idna 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)";
          "matches" = "matches 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)";
          "percent-encoding" = "percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
          "heap_size" = [ "heapsize" ];
          "query_encoding" = [ "encoding" ];
        };
      };
    "users 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "users";
        version = "0.8.0";
        edition = "2015";
        sha256 = "10fr67csic30jhlv6ckbzxz9bvb9g7ymypnkmvl727w9hbp5m6kq";
        authors = [
          "ogham@bsago.me"
        ];
        dependencies = {
          "libc" = "libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)";
        };
        features = {
          "default" = [ "cache" "mock" ];
        };
        resolvedDefaultFeatures = [ "cache" "default" "mock" ];
      };
    "vcpkg 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "vcpkg";
        version = "0.2.6";
        edition = "2015";
        sha256 = "1ig6jqpzzl1z9vk4qywgpfr4hfbd8ny8frqsgm3r449wkc4n1i5x";
        authors = [
          "Jim McGrath <jimmc2@gmail.com>"
        ];
        features = {
        };
      };
    "vec_map 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "vec_map";
        version = "0.8.1";
        edition = "2015";
        sha256 = "1jj2nrg8h3l53d43rwkpkikq5a5x15ms4rf1rw92hp5lrqhi8mpi";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Jorge Aparicio <japaricious@gmail.com>"
          "Alexis Beingessner <a.beingessner@gmail.com>"
          "Brian Anderson <>"
          "tbu- <>"
          "Manish Goregaokar <>"
          "Aaron Turon <aturon@mozilla.com>"
          "Adolfo Ochagavía <>"
          "Niko Matsakis <>"
          "Steven Fackler <>"
          "Chase Southwood <csouth3@illinois.edu>"
          "Eduard Burtescu <>"
          "Florian Wilkens <>"
          "Félix Raimundo <>"
          "Tibor Benke <>"
          "Markus Siemens <markus@m-siemens.de>"
          "Josh Branchaud <jbranchaud@gmail.com>"
          "Huon Wilson <dbau.pp@gmail.com>"
          "Corey Farwell <coref@rwell.org>"
          "Aaron Liblong <>"
          "Nick Cameron <nrc@ncameron.org>"
          "Patrick Walton <pcwalton@mimiga.net>"
          "Felix S Klock II <>"
          "Andrew Paseltiner <apaseltiner@gmail.com>"
          "Sean McArthur <sean.monstar@gmail.com>"
          "Vadim Petrochenkov <>"
        ];
        features = {
          "eders" = [ "serde" ];
        };
      };
    "winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "winapi";
        version = "0.3.6";
        edition = "2015";
        sha256 = "1d9jfp4cjd82sr1q4dgdlrkvm33zhhav9d7ihr0nivqbncr059m4";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = {
          "winapi-i686-pc-windows-gnu" = {
            packageId = "winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)";
            target = (stdenv.hostPlatform.config == "i686-pc-windows-gnu");
          };
          "winapi-x86_64-pc-windows-gnu" = {
            packageId = "winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)";
            target = (stdenv.hostPlatform.config == "x86_64-pc-windows-gnu");
          };
        };
        features = {
        };
        resolvedDefaultFeatures = [ "consoleapi" "dbghelp" "errhandlingapi" "knownfolders" "minwinbase" "minwindef" "ntdef" "ntsecapi" "objbase" "processenv" "processthreadsapi" "profileapi" "shlobj" "std" "sysinfoapi" "timezoneapi" "winbase" "winerror" "winnt" "winsock2" "ws2def" ];
      };
    "winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "winapi-i686-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "05ihkij18r4gamjpxj4gra24514can762imjzlmak5wlzidplzrp";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        features = {
        };
      };
    "winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)"
      = rec {
        crateName = "winapi-x86_64-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0n1ylmlsb8yg1v583i4xy0qmqg42275flvbc51hdqjjfjcl9vlbj";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        features = {
        };
      };
  };

  #
  # crate2nix/default.nix (excerpt start)
  # 

  # Target (platform) data for conditional dependencies.
  # This corresponds to what buildRustCrate is setting.
  target = {
      unix = true;
      windows = false;

      # This doesn't appear to be officially documented anywhere yet.
      # See https://github.com/rust-lang-nursery/rust-forge/issues/101.
      os = if stdenv.hostPlatform.isDarwin
        then "macos"
        else stdenv.hostPlatform.parsed.kernel.name;
      arch = stdenv.hostPlatform.parsed.cpu.name;
      family = "unix";
      env = "gnu";
      endian = if stdenv.hostPlatform.parsed.cpu.significantByte.name == "littleEndian" then "little" else "big";
      pointer_width = toString stdenv.hostPlatform.parsed.cpu.bits;
      vendor = stdenv.hostPlatform.parsed.vendor.name;
      debug_assertions = false;
  };

  /* Filters common temp files and build files */
  # TODO(pkolloch): Substitute with gitignore filter
  sourceFilter = name: type:
    let baseName = builtins.baseNameOf (builtins.toString name);
    in ! (
      # Filter out git
      baseName == ".gitignore" ||
      (type == "directory" && baseName == ".git" ) ||

      # Filter out build results
      (type == "directory" && (
        baseName == "target" ||
        baseName == "_site" ||
        baseName == ".sass-cache" ||
        baseName == ".jekyll-metadata" ||
        baseName == "build-artifacts"
        )) ||

      # Filter out nix-build result symlinks
      (type == "symlink" && lib.hasPrefix "result" baseName) ||

      # Filter out IDE config
      (type == "directory" && (
        baseName == ".idea" ||
        baseName == ".vscode"
        )) ||
      lib.hasSuffix ".iml" baseName ||

      # Filter out nix build files
      # lib.hasSuffix ".nix" baseName ||

      # Filter out editor backup / swap files.
      lib.hasSuffix "~" baseName ||
      builtins.match "^\\.sw[a-z]$$" baseName != null ||
      builtins.match "^\\..*\\.sw[a-z]$$" baseName != null ||
      lib.hasSuffix ".tmp" baseName ||
      lib.hasSuffix ".bak" baseName ||
      baseName == "tests.nix"
    );

  /* A restricted overridable version of  buildRustCrateWithFeaturesImpl. */
  buildRustCrateWithFeatures = {packageId, features}:
    lib.makeOverridable
      ({features}: buildRustCrateWithFeaturesImpl {inherit packageId features;})
      { inherit features; };

  /* Returns a buildRustCrate derivation for the given packageId and features. */
  buildRustCrateWithFeaturesImpl = { crateConfigs? crates, packageId, features } @ args:
    assert (builtins.isAttrs crateConfigs);
    assert (builtins.isString packageId);
    assert (builtins.isList features);

    let mergedFeatures = mergePackageFeatures args;
        buildByPackageId = packageId:
          let features = mergedFeatures."${packageId}" or [];
              crateConfig = lib.filterAttrs (n: v: n != "resolvedDefaultFeatures") crateConfigs."${packageId}";
              dependencies =
                dependencyDerivations buildByPackageId features (crateConfig.dependencies or {});
              buildDependencies =
                dependencyDerivations buildByPackageId features (crateConfig.buildDependencies or {});
              dependenciesWithRenames =
                lib.filterAttrs (n: v: v ? "rename")
                  (crateConfig.buildDependencies or {} // crateConfig.dependencies or {});
              crateRenames =
                lib.mapAttrs (name: value: value.rename or name) dependenciesWithRenames;
          in buildRustCrate (crateConfig // { inherit features dependencies buildDependencies crateRenames; });
    in buildByPackageId packageId;

  /* Returns the actual derivations for the given dependencies. */
  dependencyDerivations = buildByPackageId: features: dependencies:
    assert (builtins.isFunction buildByPackageId);
    assert (builtins.isList features);
    assert (builtins.isAttrs dependencies);

    let enabledDependencies = filterEnabledDependencies dependencies features;
        depDerivation = dependencyName: dependency:
        buildByPackageId (dependencyPackageId dependency);
    in builtins.attrValues (lib.mapAttrs depDerivation enabledDependencies);

  /* Returns differences between cargo default features and crate2nix default features.
   *
   * This is useful for verifying the feature resolution in crate2nix.
   */
  diffDefaultPackageFeatures = {crateConfigs ? crates, packageId}:
    assert (builtins.isAttrs crateConfigs);

    let prefixValues = prefix: lib.mapAttrs (n: v: { "${prefix}" = v; });
        mergedFeatures =
          prefixValues
            "crate2nix"
            (mergePackageFeatures {inherit crateConfigs packageId; features = ["default"]; });
        configs = prefixValues "cargo" crateConfigs;
        combined = lib.foldAttrs (a: b: a // b) {} [ mergedFeatures configs ];
        onlyInCargo = builtins.attrNames (lib.filterAttrs (n: v: !(v ? "crate2nix" ) && (v ? "cargo")) combined);
        onlyInCrate2Nix = builtins.attrNames (lib.filterAttrs (n: v: (v ? "crate2nix" ) && !(v ? "cargo")) combined);
        differentFeatures = lib.filterAttrs
          (n: v:
          (v ? "crate2nix" )
          && (v ? "cargo")
          && (v.crate2nix.features or []) != (v."cargo".resolved_default_features or []))
          combined;
    in builtins.toJSON { inherit onlyInCargo onlyInCrate2Nix differentFeatures; };

  /* Returns the feature configuration by package id for the given input crate. */
  mergePackageFeatures = {crateConfigs ? crates, packageId, features} @ args:
    assert (builtins.isAttrs crateConfigs);
    assert (builtins.isString packageId);
    assert (builtins.isList features);

    let packageFeatures = listOfPackageFeatures args;
        grouped = lib.groupBy (x: x.packageId) packageFeatures;
    in lib.mapAttrs (n: v: sortedUnique (builtins.concatLists (builtins.map (v: v.features) v))) grouped;

  /* Returns a { packageId, features } attribute set for every package needed for building the
     package for the given packageId with the given features.

     Returns multiple, potentially conflicting attribute sets for dependencies that are reachable
     by multiple paths in the dependency tree.
  */
  listOfPackageFeatures = {crateConfigs ? crates, packageId, features, dependencyPath? [packageId]} @ args:
    assert (builtins.isAttrs crateConfigs);
    assert (builtins.isString packageId);
    assert (builtins.isList features);

    let
        crateConfig = crateConfigs."${packageId}" or (builtins.throw "Package not found: ${packageId}");
        expandedFeatures = expandFeatures (crateConfig.features or {}) features;

        depWithResolvedFeatures = dependencyName: dependency:
          let packageId = dependencyPackageId dependency;
              features = dependencyFeatures expandedFeatures dependencyName dependency;
          in { inherit packageId features; };

        resolveDependencies = path: dependencies:
          assert (builtins.isAttrs dependencies);

          let enabledDependencies = filterEnabledDependencies dependencies expandedFeatures;
              directDependencies =
                builtins.attrValues (lib.mapAttrs depWithResolvedFeatures enabledDependencies);
          in builtins.concatMap
            ({packageId, features}: listOfPackageFeatures {
              # This is purely for debugging.
              dependencyPath = dependencyPath ++ [path packageId];
              inherit crateConfigs packageId features;
            })
             directDependencies;

        resolvedDependencies = builtins.concatLists
          [
            (resolveDependencies "dependencies" (crateConfig.dependencies or {}))
            (resolveDependencies "buildDependencies" (crateConfig.buildDependencies or {}))
          ];

    in [{inherit packageId; features = expandedFeatures;}] ++ resolvedDependencies;

  /* Returns the enabled dependencies given the enabled features. */
  filterEnabledDependencies = dependencies: features:
    assert (builtins.isAttrs dependencies);
    assert (builtins.isList features);

    lib.filterAttrs
      (depName: dep:
        builtins.isString dep
        || dep.target or true
        && (!(dep.optional or false) || builtins.any (doesFeatureEnableDependency depName) features))
      dependencies;

  /* Returns whether the given feature should enable the given dependency. */
  doesFeatureEnableDependency = depName: feature:
    let prefix = "${depName}/";
        len = builtins.stringLength prefix;
        startsWithPrefix = builtins.substring 0 len feature == prefix;
    in feature == depName || startsWithPrefix;

  /* Returns the expanded features for the given inputFeatures by applying the rules in featureMap.

     featureMap is an attribute set which maps feature names to lists of further feature names to enable in case this
     feature is selected.
  */
  expandFeatures = featureMap: inputFeatures:
    assert (builtins.isAttrs featureMap);
    assert (builtins.isList inputFeatures);

    let expandFeature = feature:
          assert (builtins.isString feature);
          [feature] ++ (expandFeatures featureMap (featureMap."${feature}" or []));
        outFeatures = builtins.concatMap expandFeature inputFeatures;
    in sortedUnique outFeatures;

  /* The package ID of the given dependency. */
  dependencyPackageId = dependency: if builtins.isString dependency then dependency else dependency.packageId;

  /* Returns the actual dependencies for the given dependency. */
  dependencyFeatures = features: dependencyName: dependency:
    assert (builtins.isList features);
    assert (builtins.isString dependencyName);
    assert (builtins.isAttrs dependency || builtins.isString dependency);

    let defaultOrNil = if builtins.isString dependency || dependency.usesDefaultFeatures or true
                       then ["default"]
                       else [];
        explicitFeatures = if builtins.isString dependency then [] else dependency.features or [];
        additionalDependencyFeatures =

          let dependencyPrefix = dependencyName+"/";
              dependencyFeatures =
                builtins.filter (f: lib.hasPrefix dependencyPrefix f) features;
          in builtins.map (lib.removePrefix dependencyPrefix) dependencyFeatures;
    in
      defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

  /* Sorts and removes duplicates from a list of strings. */
  sortedUnique = features:
    assert (builtins.isList features);
    assert (builtins.all builtins.isString features);

    let outFeaturesSet = lib.foldl (set: feature: set // {"${feature}" = 1;} ) {} features;
        outFeaturesUnique = builtins.attrNames outFeaturesSet;
    in builtins.sort (a: b: a < b) outFeaturesUnique;

  #
  # crate2nix/default.nix (excerpt end)
  # 

}
